@page "/recorder"
@using Microsoft.SemanticKernel
@using System.Text.Json

@inject ILogger<Recorder> Logger
@inject ISnackbar Snackbar
@inject ImageAssistantService ImageService
@inject NavigationManager NavManager
@inject StepRecorderService RecorderService
@inject AppStateService StateService

<MudGrid>
    <MudItem Class="relative" xs="12" md="12" lg="12">
        <MudText Typo="Typo.h3"><b>Step 1</b> : Record The Issue</MudText>
        <div class="pl-1 my-4">
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                @statusMessage
            </MudText>
        </div>
        <div class="py-4 mb-16 mb-md-0 text-center">
            @if (currentStatus == RecordingStatus.None)
            {
                    <MudButton StartIcon="@Icons.Material.Filled.Adjust" OnClick="StartRecording" Color="Color.Primary" Variant="Variant.Filled" Style="width:200px;height:50px;border-radius:30px">Record</MudButton>
            }
            else if (currentStatus == RecordingStatus.RecordingStarted || currentStatus == RecordingStatus.SavingRecording)
            {
                <MudButton Disabled="(currentStatus == RecordingStatus.SavingRecording)" StartIcon="@Icons.Material.Filled.Stop" OnClick="StopRecording" Variant="Variant.Filled" Color="Color.Primary" Style="width:200px;height:50px;border-radius:30px">
                    @if (currentStatus == RecordingStatus.SavingRecording)
                    {
                        <MudText Class="ms-2">Saving...</MudText>
                    }
                    else
                    {
                        <MudText>Stop Recording</MudText>
                    }
                </MudButton>
            }
            else if (currentStatus == RecordingStatus.RecordingComplete || currentStatus == RecordingStatus.AnalysisStarted)
            {
                    <MudButton Disabled="(currentStatus == RecordingStatus.AnalysisStarted)" StartIcon="@Icons.Material.Filled.AutoAwesome" OnClick="AnalyzeSteps" Variant="Variant.Filled" Color="Color.Primary" Style="width:200px;height:50px;border-radius:30px">
                    @if (currentStatus == RecordingStatus.AnalysisStarted)
                    {
                        <MudText Class="ms-2">Analyzing...</MudText>
                    }
                    else
                    {
                        <MudText>Analyze</MudText>
                    }
                </MudButton>
            }
        </div>
        <div class="d-flex align-center py-4">
            @if (currentStatus == RecordingStatus.RecordingStarted)
            {
                <MudProgressCircular Indeterminate="true" Class="mx-4" Color="Color.Info" Size="Size.Small" />
                <MudText Typo="Typo.body1" Class="mt-2">Recording in progress...</MudText>
            }
            else if (currentStatus == RecordingStatus.SavingRecording)
            {
                <MudProgressCircular Indeterminate="true" Class="mx-4" Color="Color.Info" Size="Size.Small" />
                <MudText Typo="Typo.body1" Class="mt-2">Saving, please wait...</MudText>
            }
            else if (currentStatus == RecordingStatus.AnalysisStarted)
            {
                <MudProgressCircular Indeterminate="true" Class="mx-4" Color="Color.Info" Size="Size.Small" />
                <MudText Typo="Typo.body1" Class="mt-2">Analyzing, please wait...</MudText>
            }
        </div>
    </MudItem>
</MudGrid>

@if (currentStatus == RecordingStatus.RecordingComplete && steps != null && images != null)
{
    <MudItem xs="12">
        @foreach (var (step, image, index) in steps.Zip(images, (s, i) => (s, i, steps.IndexOf(s))))
        {
            <MudCard Class="my-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Step @(index + 1)</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                        @step
                    </MudText>
                    <img src="@($"data:image/jpeg;base64,{ConvertToBase64(image)}")" alt="Step @(index + 1) Image" style="max-width: 100%; height: auto;" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => RemoveStep(index)">Remove Step</MudButton>
                </MudCardActions>
            </MudCard>
        }
    </MudItem>
}

<MudDialog @bind-Visible="dialogVisible" Options="new() { FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Notes" Class="mr-3" /> Analysis Result
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (analysisResult is not null)
        {
            <MudText Typo="Typo.body2" Style="white-space: pre-wrap; overflow-wrap: break-word;">@analysisResult</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => dialogVisible = false" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private enum RecordingStatus
    {
        None,
        RecordingStarted,
        SavingRecording,
        RecordingComplete,
        AnalysisStarted,
        AnalysisComplete
    }

    private RecordingStatus currentStatus = RecordingStatus.None;
    private string statusMessage = "Click 'Record' to begin.";
    private ChatMessageContent analysisResult;
    private List<string> steps;
    private List<string> images;
    private bool dialogVisible;

    protected async Task StartRecording()
    {
        try
        {
            statusMessage = "Recording in progress. Reproduce the issue...";
            currentStatus = RecordingStatus.RecordingStarted;
            await RecorderService.StartRecordingAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.InnerException?.Message ?? ex.Message, Severity.Error);
            currentStatus = RecordingStatus.None;
            statusMessage = "An error occurred while starting the recording.";
        }
    }

    private async Task StopRecording()
    {
        try
        {
            StateHasChanged();
            statusMessage = "Saving the recording...";
            currentStatus = RecordingStatus.SavingRecording;
            await RecorderService.StopRecordingAsync();
            ShowRecordedSteps();
            statusMessage = "Recording is complete. Verify the recorded steps and click on Analyze.";
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.InnerException?.Message ?? ex.Message, Severity.Error);
            statusMessage = "An error occurred while stopping the recording.";
        }
        finally
        {
            currentStatus = RecordingStatus.RecordingComplete;
        }
    }

    private void ShowRecordedSteps()
    {
        var recordingZip = StateService.GetValue<string>("Recording");
        var recordingFile = ZipExtractor.ExtractFile(recordingZip);
        images = MhtExtractor.ExtractImages(recordingFile);
        steps = MhtExtractor.ExtractSteps(recordingFile);
    }

    private async Task AnalyzeSteps()
    {
        try
        {
            currentStatus = RecordingStatus.AnalysisStarted;
            analysisResult = await ImageService.AnalyzeStepsAsync(images, steps);
            var analysisModel = JsonSerializer.Deserialize<AnalysisModel>(analysisResult.ToString());
            StateService.SaveValue<AnalysisModel>(nameof(AnalysisModel), analysisModel);
            currentStatus = RecordingStatus.AnalysisComplete;
            NavManager.NavigateTo("collection");
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private static string ConvertToBase64(string filePath)
    {
        byte[] imageBytes = File.ReadAllBytes(filePath);
        return Convert.ToBase64String(imageBytes);
    }

    private void RemoveStep(int stepIndex)
    {
        steps.RemoveAt(stepIndex);
        images.RemoveAt(stepIndex);
    }
}