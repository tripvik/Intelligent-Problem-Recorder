@page "/select"

@inject DotnetExplorerService DotnetExplorerService
@inject NavigationManager NavManager
@inject AppExploreService AppService
@inject AppStateService State
@inject ILogger<AppSelection> Logger
@inject ISnackbar Snackbar


<MudGrid>
    <MudItem Class="relative" xs="12" md="12" lg="12">
        <MudText Typo="Typo.h3">Select Applications to Monitor</MudText>
        <div class="pl-1 my-4">
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                Select the .NET Apps that you to want to troubleshoot.
            </MudText>
        </div>
    </MudItem>
    <MudItem Class="relative" xs="12" md="12" lg="9">
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@CustomIcons.DotNet" class="mr-3"></MudIcon>
                        <MudText Typo="Typo.h6">.NET Applications</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    @if (dotnetAppDetails is null)
                    {
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                    else if (!dotnetAppDetails.Any())
                    {
                        <MudAlert Class="my-4 py-4" Severity="Severity.Normal" Variant="Variant.Outlined">No active .NET apps were detected. Please start your desired application and ensure it's actively processing tasks.</MudAlert>
                        <MudItem Class="d-flex justify-end my-4 py-4">
                            <MudButton Variant="Variant.Outlined" OnClick="RescanDotnetAppsAsync">Rescan</MudButton>
                        </MudItem>
                    }
                    else
                    {
                        <AppGrid Application="dotnetAppDetails" Type=".NET Apps" @ref="dotnetAppGrid" />
                        <MudItem Class="d-flex justify-end my-4 py-4">
                            <MudButton Variant="Variant.Outlined" OnClick="RescanDotnetAppsAsync">Rescan</MudButton>
                        </MudItem>
                    }
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    <MudItem xs="12" md="12" lg="9">
        <div class="d-flex py-4 mb-16 mb-md-0">
            <MudButton Style="height:50px;border-radius:30px" EndIcon="@Icons.Material.Outlined.KeyboardArrowRight" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="SaveSelectionInput">Next Step</MudButton>
        </div>
    </MudItem>
</MudGrid>


@code {
    List<ApplicationDetail> dotnetAppDetails;

    AppGrid dotnetAppGrid;


    protected override void OnInitialized()
    {
        dotnetAppDetails = AppService.GetApplicationsByType(ApplicationType.DotNet).ToList();
    }

    private void SaveSelectionInput()
    {
        UpdateSelectionStatus(dotnetAppGrid?.SelectedApplications, ApplicationType.DotNet);

        bool noAppsSelected = AppService.GetAllApplications().All(app => !app.IsSelected);

        if (noAppsSelected)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("No application selected. Please select apps to Instrument.", Severity.Error);
            return;
        }

        NavManager.NavigateTo("/connection");
    }

    private void UpdateSelectionStatus(HashSet<ApplicationDetail> selectedApps, ApplicationType appType)
    {
        var allAppsOfType = AppService.GetApplicationsByType(appType);

        foreach (var app in allAppsOfType)
        {
            app.IsSelected = selectedApps?.Contains(app) ?? false;
        }
    }

    private async Task RescanDotnetAppsAsync()
    {
        dotnetAppDetails = default;
        dotnetAppDetails = await DotnetExplorerService.DetectAndAddRunningDotNetApplicationsAsync();
    }
}